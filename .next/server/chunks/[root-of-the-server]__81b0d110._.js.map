{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///D:/Github/ChatApp/src/app/api/chat/route.ts"],"sourcesContent":["// src/app/api/chat/route.ts\r\nimport { NextResponse } from \"next/server\";\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const { message } = await req.json();\r\n\r\n    // ‚úÖ Check if API key is loaded\r\n    const apiKey = process.env.OPENAI_API_KEY;\r\n    console.log(\"API KEY loaded:\", apiKey ? \"‚úÖ Yes\" : \"‚ùå No\");\r\n\r\n    if (!apiKey) {\r\n      return NextResponse.json(\r\n        { reply: \"‚ö†Ô∏è Missing API key on server.\" },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // ‚úÖ Call OpenAI API\r\n    const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${apiKey}`,\r\n      },\r\n      body: JSON.stringify({\r\n        model: \"gpt-3.5-turbo\", // you can also try: \"gpt-4o-mini\"\r\n        messages: [{ role: \"user\", content: message }],\r\n      }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    console.log(\"üîç Raw API response:\", JSON.stringify(data, null, 2));\r\n\r\n    // ‚úÖ Handle API errors\r\n    if (data.error) {\r\n      console.error(\"‚ùå OpenAI API error:\", data.error);\r\n      return NextResponse.json(\r\n        { reply: `‚ö†Ô∏è OpenAI Error: ${data.error.message}` },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // ‚úÖ Extract reply safely\r\n    const reply = data.choices?.[0]?.message?.content?.trim();\r\n    if (!reply) {\r\n      console.error(\"‚ùå Unexpected response format:\", data);\r\n      return NextResponse.json(\r\n        { reply: \"‚ö†Ô∏è No valid reply from AI.\" },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({ reply });\r\n  } catch (error) {\r\n    console.error(\"‚ùå Chat API error:\", error);\r\n    return NextResponse.json(\r\n      { reply: \"‚ö†Ô∏è Error connecting to AI.\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,4BAA4B;;;;AAC5B;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,IAAI;QAElC,+BAA+B;QAC/B,MAAM,SAAS,QAAQ,GAAG,CAAC,cAAc;QACzC,QAAQ,GAAG,CAAC,mBAAmB,SAAS,UAAU;QAElD,IAAI,CAAC,QAAQ;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAgC,GACzC;gBAAE,QAAQ;YAAI;QAElB;QAEA,oBAAoB;QACpB,MAAM,WAAW,MAAM,MAAM,8CAA8C;YACzE,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,eAAe,CAAC,OAAO,EAAE,QAAQ;YACnC;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB,OAAO;gBACP,UAAU;oBAAC;wBAAE,MAAM;wBAAQ,SAAS;oBAAQ;iBAAE;YAChD;QACF;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,QAAQ,GAAG,CAAC,wBAAwB,KAAK,SAAS,CAAC,MAAM,MAAM;QAE/D,sBAAsB;QACtB,IAAI,KAAK,KAAK,EAAE;YACd,QAAQ,KAAK,CAAC,uBAAuB,KAAK,KAAK;YAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,CAAC,iBAAiB,EAAE,KAAK,KAAK,CAAC,OAAO,EAAE;YAAC,GAClD;gBAAE,QAAQ;YAAI;QAElB;QAEA,yBAAyB;QACzB,MAAM,QAAQ,KAAK,OAAO,EAAE,CAAC,EAAE,EAAE,SAAS,SAAS;QACnD,IAAI,CAAC,OAAO;YACV,QAAQ,KAAK,CAAC,iCAAiC;YAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA6B,GACtC;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAM;IACnC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA6B,GACtC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}