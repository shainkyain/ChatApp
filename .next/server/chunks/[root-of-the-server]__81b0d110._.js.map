{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///D:/Github/ChatApp/src/app/api/chat/route.ts"],"sourcesContent":[" \r\n\r\n// // src/app/api/chat/route.ts\r\n// import { NextResponse } from \"next/server\";\r\n\r\n// export async function POST(req: Request) {\r\n//   try {\r\n//     const { message } = await req.json();\r\n\r\n//     // ‚úÖ Load Gemini API Key\r\n//     const apiKey = process.env.GEMINI_API_KEY;\r\n//     if (!apiKey) {\r\n//       return NextResponse.json(\r\n//         { reply: \"‚ö†Ô∏è Missing Gemini API key on server.\" },\r\n//         { status: 500 }\r\n//       );\r\n//     }\r\n\r\n//     // ‚úÖ Define endpoint (Gemini 2.0 Flash)\r\n//     const endpoint = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\r\n\r\n//     const prompt = `\r\n//                     Please reply to the following message in 40 words or fewer.\r\n//                     Your tone should be soft, empathetic, and emotionally expressive.\r\n//                     Message: \"${message}\"\r\n//                     `;\r\n//     // ‚úÖ Prepare request body\r\n//     const body = {\r\n//       contents: [\r\n//         {\r\n//           parts: [\r\n//             {\r\n//               text: prompt,\r\n//             },\r\n//           ],\r\n//         },\r\n//       ],\r\n//     };\r\n\r\n//     // ‚úÖ Send request to Gemini\r\n//     const response = await fetch(endpoint, {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//         \"X-goog-api-key\": apiKey,\r\n//       },\r\n//       body: JSON.stringify(body),\r\n//     });\r\n\r\n//     const data = await response.json();\r\n//     console.log(\"üîç Gemini response:\", JSON.stringify(data, null, 2));\r\n\r\n//     // ‚úÖ Handle errors from Gemini\r\n//     if (data.error) {\r\n//       console.error(\"‚ùå Gemini error:\", data.error);\r\n//       return NextResponse.json(\r\n//         { reply: `‚ö†Ô∏è Gemini Error: ${data.error.message}` },\r\n//         { status: 500 }\r\n//       );\r\n//     }\r\n\r\n//     // ‚úÖ Extract generated text\r\n//     const reply = data.candidates?.[0]?.content?.parts?.[0]?.text?.trim();\r\n//     if (!reply) {\r\n//       console.error(\"‚ùå Invalid Gemini response format\");\r\n//       return NextResponse.json(\r\n//         { reply: \"‚ö†Ô∏è No valid response from Gemini.\" },\r\n//         { status: 500 }\r\n//       );\r\n//     }\r\n\r\n//     return NextResponse.json({ reply });\r\n//   } catch (error) {\r\n//     console.error(\"‚ùå Gemini API exception:\", error);\r\n//     return NextResponse.json(\r\n//       { reply: \"‚ö†Ô∏è Failed to connect to Gemini API.\" },\r\n//       { status: 500 }\r\n//     );\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\n// add rules to gemini reply\r\n\r\n// -> length of reply 40 words at most \r\n// -> Emotional Reply Would prefre \r\n// -> Softtone \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// src/app/api/chat/route.ts\r\nimport { NextResponse } from \"next/server\";\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    // ‚úÖ Parse the incoming request body\r\n    const { message } = await req.json();\r\n\r\n    // ‚úÖ Validate message\r\n    if (!message || typeof message !== \"string\") {\r\n      return NextResponse.json(\r\n        { reply: \"‚ö†Ô∏è Invalid or missing message.\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // ‚úÖ Load Gemini API key\r\n    const apiKey = process.env.GEMINI_API_KEY;\r\n    if (!apiKey) {\r\n      return NextResponse.json(\r\n        { reply: \"‚ö†Ô∏è Missing Gemini API key on server.\" },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // ‚úÖ Gemini 2.0 Flash API endpoint\r\n    const endpoint = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\r\n\r\n    // ‚úÖ Reply generation rules\r\n    const rules = {\r\n      tone: \"soft and emotionally expressive\",\r\n      maxWords: 40,\r\n    };\r\n\r\n    // ‚úÖ Construct the prompt\r\n    const prompt = `Please respond to the following message using ${rules.maxWords} words or fewer. Your reply should be ${rules.tone}. Here is the message: \"${message}\"`;\r\n\r\n    // ‚úÖ Gemini API request body\r\n    const body = {\r\n      contents: [\r\n        {\r\n          parts: [\r\n            {\r\n              text: prompt,\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n\r\n    // ‚úÖ Send request to Gemini API\r\n    const response = await fetch(endpoint, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"X-goog-api-key\": apiKey,\r\n      },\r\n      body: JSON.stringify(body),\r\n    });\r\n\r\n    const data = await response.json();\r\n    console.log(\"üîç Gemini API response:\", JSON.stringify(data, null, 2));\r\n\r\n    // ‚úÖ Handle Gemini API errors\r\n    if (data.error) {\r\n      console.error(\"‚ùå Gemini API error:\", data.error);\r\n      return NextResponse.json(\r\n        { reply: `‚ö†Ô∏è Gemini Error: ${data.error.message}` },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // ‚úÖ Extract Gemini reply\r\n    const reply = data.candidates?.[0]?.content?.parts?.[0]?.text?.trim();\r\n    if (!reply) {\r\n      console.error(\"‚ùå Invalid Gemini response format\");\r\n      return NextResponse.json(\r\n        { reply: \"‚ö†Ô∏è No valid response from Gemini.\" },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // ‚úÖ Return Gemini reply\r\n    return NextResponse.json({ reply });\r\n\r\n  } catch (error) {\r\n    console.error(\"‚ùå Exception while processing Gemini API request:\", error);\r\n    return NextResponse.json(\r\n      { reply: \"‚ö†Ô∏è Failed to connect to Gemini API.\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"],"names":[],"mappings":"AAEA,+BAA+B;AAC/B,8CAA8C;AAE9C,6CAA6C;AAC7C,UAAU;AACV,4CAA4C;AAE5C,+BAA+B;AAC/B,iDAAiD;AACjD,qBAAqB;AACrB,kCAAkC;AAClC,6DAA6D;AAC7D,0BAA0B;AAC1B,WAAW;AACX,QAAQ;AAER,8CAA8C;AAC9C,iIAAiI;AAEjI,uBAAuB;AACvB,kFAAkF;AAClF,wFAAwF;AACxF,4CAA4C;AAC5C,yBAAyB;AACzB,gCAAgC;AAChC,qBAAqB;AACrB,oBAAoB;AACpB,YAAY;AACZ,qBAAqB;AACrB,gBAAgB;AAChB,8BAA8B;AAC9B,iBAAiB;AACjB,eAAe;AACf,aAAa;AACb,WAAW;AACX,SAAS;AAET,kCAAkC;AAClC,+CAA+C;AAC/C,wBAAwB;AACxB,mBAAmB;AACnB,8CAA8C;AAC9C,oCAAoC;AACpC,WAAW;AACX,oCAAoC;AACpC,UAAU;AAEV,0CAA0C;AAC1C,yEAAyE;AAEzE,qCAAqC;AACrC,wBAAwB;AACxB,sDAAsD;AACtD,kCAAkC;AAClC,+DAA+D;AAC/D,0BAA0B;AAC1B,WAAW;AACX,QAAQ;AAER,kCAAkC;AAClC,6EAA6E;AAC7E,oBAAoB;AACpB,2DAA2D;AAC3D,kCAAkC;AAClC,0DAA0D;AAC1D,0BAA0B;AAC1B,WAAW;AACX,QAAQ;AAER,2CAA2C;AAC3C,sBAAsB;AACtB,uDAAuD;AACvD,gCAAgC;AAChC,0DAA0D;AAC1D,wBAAwB;AACxB,SAAS;AACT,MAAM;AACN,IAAI;AAKJ,4BAA4B;AAE5B,uCAAuC;AACvC,mCAAmC;AACnC,eAAe;AAWf,4BAA4B;;;;AAC5B;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,oCAAoC;QACpC,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,IAAI;QAElC,qBAAqB;QACrB,IAAI,CAAC,WAAW,OAAO,YAAY,UAAU;YAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAiC,GAC1C;gBAAE,QAAQ;YAAI;QAElB;QAEA,wBAAwB;QACxB,MAAM,SAAS,QAAQ,GAAG,CAAC,cAAc;QACzC,IAAI,CAAC,QAAQ;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuC,GAChD;gBAAE,QAAQ;YAAI;QAElB;QAEA,kCAAkC;QAClC,MAAM,WAAW,CAAC,6FAA6F,EAAE,QAAQ;QAEzH,2BAA2B;QAC3B,MAAM,QAAQ;YACZ,MAAM;YACN,UAAU;QACZ;QAEA,yBAAyB;QACzB,MAAM,SAAS,CAAC,8CAA8C,EAAE,MAAM,QAAQ,CAAC,sCAAsC,EAAE,MAAM,IAAI,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;QAEtK,4BAA4B;QAC5B,MAAM,OAAO;YACX,UAAU;gBACR;oBACE,OAAO;wBACL;4BACE,MAAM;wBACR;qBACD;gBACH;aACD;QACH;QAEA,+BAA+B;QAC/B,MAAM,WAAW,MAAM,MAAM,UAAU;YACrC,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,kBAAkB;YACpB;YACA,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,QAAQ,GAAG,CAAC,2BAA2B,KAAK,SAAS,CAAC,MAAM,MAAM;QAElE,6BAA6B;QAC7B,IAAI,KAAK,KAAK,EAAE;YACd,QAAQ,KAAK,CAAC,uBAAuB,KAAK,KAAK;YAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,CAAC,iBAAiB,EAAE,KAAK,KAAK,CAAC,OAAO,EAAE;YAAC,GAClD;gBAAE,QAAQ;YAAI;QAElB;QAEA,yBAAyB;QACzB,MAAM,QAAQ,KAAK,UAAU,EAAE,CAAC,EAAE,EAAE,SAAS,OAAO,CAAC,EAAE,EAAE,MAAM;QAC/D,IAAI,CAAC,OAAO;YACV,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAoC,GAC7C;gBAAE,QAAQ;YAAI;QAElB;QAEA,wBAAwB;QACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAM;IAEnC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oDAAoD;QAClE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAsC,GAC/C;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}