{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///D:/Github/ChatApp/src/app/api/chat/route.ts"],"sourcesContent":["// // src/app/api/chat/route.ts\r\n// import { NextResponse } from \"next/server\";\r\n\r\n// export async function POST(req: Request) {\r\n//   try {\r\n//     const { message } = await req.json();\r\n\r\n//     // ‚úÖ Check if API key is loaded\r\n//     const apiKey = process.env.OPENAI_API_KEY;\r\n//     console.log(\"API KEY loaded:\", apiKey ? \"‚úÖ Yes\" : \"‚ùå No\");\r\n\r\n//     if (!apiKey) {\r\n//       return NextResponse.json(\r\n//         { reply: \"‚ö†Ô∏è Missing API key on server.\" },\r\n//         { status: 500 }\r\n//       );\r\n//     }\r\n\r\n//     // ‚úÖ Call OpenAI API\r\n//     const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//         Authorization: `Bearer ${apiKey}`,\r\n//       },\r\n//       body: JSON.stringify({\r\n//         model: \"gpt-3.5-turbo\", // you can also try: \"gpt-4o-mini\"\r\n//         messages: [{ role: \"user\", content: message }],\r\n//       }),\r\n//     });\r\n\r\n//     const data = await response.json();\r\n//     console.log(\"üîç Raw API response:\", JSON.stringify(data, null, 2));\r\n\r\n//     // ‚úÖ Handle API errors\r\n//     if (data.error) {\r\n//       console.error(\"‚ùå OpenAI API error:\", data.error);\r\n//       return NextResponse.json(\r\n//         { reply: `‚ö†Ô∏è OpenAI Error: ${data.error.message}` },\r\n//         { status: 500 }\r\n//       );\r\n//     }\r\n\r\n//     // ‚úÖ Extract reply safely\r\n//     const reply = data.choices?.[0]?.message?.content?.trim();\r\n//     if (!reply) {\r\n//       console.error(\"‚ùå Unexpected response format:\", data);\r\n//       return NextResponse.json(\r\n//         { reply: \"‚ö†Ô∏è No valid reply from AI.\" },\r\n//         { status: 500 }\r\n//       );\r\n//     }\r\n\r\n//     return NextResponse.json({ reply });\r\n//   } catch (error) {\r\n//     console.error(\"‚ùå Chat API error:\", error);\r\n//     return NextResponse.json(\r\n//       { reply: \"‚ö†Ô∏è Error connecting to AI.\" },\r\n//       { status: 500 }\r\n//     );\r\n//   }\r\n// }\r\n\r\n\r\n\r\n// src/app/api/chat/route.ts\r\nimport { NextResponse } from \"next/server\";\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const { message } = await req.json();\r\n\r\n    // ‚úÖ Load Gemini API Key\r\n    const apiKey = process.env.GEMINI_API_KEY;\r\n    if (!apiKey) {\r\n      return NextResponse.json(\r\n        { reply: \"‚ö†Ô∏è Missing Gemini API key on server.\" },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // ‚úÖ Define endpoint (Gemini 2.0 Flash)\r\n    const endpoint = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\r\n\r\n    // ‚úÖ Prepare request body\r\n    const body = {\r\n      contents: [\r\n        {\r\n          parts: [\r\n            {\r\n              text: message,\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n\r\n    // ‚úÖ Send request to Gemini\r\n    const response = await fetch(endpoint, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"X-goog-api-key\": apiKey,\r\n      },\r\n      body: JSON.stringify(body),\r\n    });\r\n\r\n    const data = await response.json();\r\n    console.log(\"üîç Gemini response:\", JSON.stringify(data, null, 2));\r\n\r\n    // ‚úÖ Handle errors from Gemini\r\n    if (data.error) {\r\n      console.error(\"‚ùå Gemini error:\", data.error);\r\n      return NextResponse.json(\r\n        { reply: `‚ö†Ô∏è Gemini Error: ${data.error.message}` },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // ‚úÖ Extract generated text\r\n    const reply = data.candidates?.[0]?.content?.parts?.[0]?.text?.trim();\r\n    if (!reply) {\r\n      console.error(\"‚ùå Invalid Gemini response format\");\r\n      return NextResponse.json(\r\n        { reply: \"‚ö†Ô∏è No valid response from Gemini.\" },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({ reply });\r\n  } catch (error) {\r\n    console.error(\"‚ùå Gemini API exception:\", error);\r\n    return NextResponse.json(\r\n      { reply: \"‚ö†Ô∏è Failed to connect to Gemini API.\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,+BAA+B;AAC/B,8CAA8C;AAE9C,6CAA6C;AAC7C,UAAU;AACV,4CAA4C;AAE5C,sCAAsC;AACtC,iDAAiD;AACjD,iEAAiE;AAEjE,qBAAqB;AACrB,kCAAkC;AAClC,sDAAsD;AACtD,0BAA0B;AAC1B,WAAW;AACX,QAAQ;AAER,2BAA2B;AAC3B,mFAAmF;AACnF,wBAAwB;AACxB,mBAAmB;AACnB,8CAA8C;AAC9C,6CAA6C;AAC7C,WAAW;AACX,+BAA+B;AAC/B,qEAAqE;AACrE,0DAA0D;AAC1D,YAAY;AACZ,UAAU;AAEV,0CAA0C;AAC1C,0EAA0E;AAE1E,6BAA6B;AAC7B,wBAAwB;AACxB,0DAA0D;AAC1D,kCAAkC;AAClC,+DAA+D;AAC/D,0BAA0B;AAC1B,WAAW;AACX,QAAQ;AAER,gCAAgC;AAChC,iEAAiE;AACjE,oBAAoB;AACpB,8DAA8D;AAC9D,kCAAkC;AAClC,mDAAmD;AACnD,0BAA0B;AAC1B,WAAW;AACX,QAAQ;AAER,2CAA2C;AAC3C,sBAAsB;AACtB,iDAAiD;AACjD,gCAAgC;AAChC,iDAAiD;AACjD,wBAAwB;AACxB,SAAS;AACT,MAAM;AACN,IAAI;AAIJ,4BAA4B;;;;AAC5B;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,IAAI;QAElC,wBAAwB;QACxB,MAAM,SAAS,QAAQ,GAAG,CAAC,cAAc;QACzC,IAAI,CAAC,QAAQ;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuC,GAChD;gBAAE,QAAQ;YAAI;QAElB;QAEA,uCAAuC;QACvC,MAAM,WAAW,CAAC,6FAA6F,EAAE,QAAQ;QAEzH,yBAAyB;QACzB,MAAM,OAAO;YACX,UAAU;gBACR;oBACE,OAAO;wBACL;4BACE,MAAM;wBACR;qBACD;gBACH;aACD;QACH;QAEA,2BAA2B;QAC3B,MAAM,WAAW,MAAM,MAAM,UAAU;YACrC,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,kBAAkB;YACpB;YACA,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,QAAQ,GAAG,CAAC,uBAAuB,KAAK,SAAS,CAAC,MAAM,MAAM;QAE9D,8BAA8B;QAC9B,IAAI,KAAK,KAAK,EAAE;YACd,QAAQ,KAAK,CAAC,mBAAmB,KAAK,KAAK;YAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,CAAC,iBAAiB,EAAE,KAAK,KAAK,CAAC,OAAO,EAAE;YAAC,GAClD;gBAAE,QAAQ;YAAI;QAElB;QAEA,2BAA2B;QAC3B,MAAM,QAAQ,KAAK,UAAU,EAAE,CAAC,EAAE,EAAE,SAAS,OAAO,CAAC,EAAE,EAAE,MAAM;QAC/D,IAAI,CAAC,OAAO;YACV,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAoC,GAC7C;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAM;IACnC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAsC,GAC/C;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}