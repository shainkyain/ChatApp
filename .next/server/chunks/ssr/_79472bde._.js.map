{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///D:/Github/ChatApp/src/app/Components/AIChat.tsx"],"sourcesContent":["// 'use client';\r\n\r\n// import React, { useState } from 'react';\r\n// // import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n// import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n\r\n// const AIChat: React.FC = () => {\r\n//   const [messages, setMessages] = useState<string[]>([]);\r\n//   const [input, setInput] = useState('');\r\n\r\n//   const {\r\n//     transcript,\r\n//     listening,\r\n//     resetTranscript,\r\n//     browserSupportsSpeechRecognition,\r\n//   } = useSpeechRecognition();\r\n\r\n//   if (!browserSupportsSpeechRecognition) {\r\n//     return <span>Speech recognition is not supported in this browser.</span>;\r\n//   }\r\n\r\n//   const handleSend = () => {\r\n//     if (!input.trim()) return;\r\n//     setMessages([...messages, `You: ${input}`, `AI: ${generateReply(input)}`]);\r\n//     setInput('');\r\n//     resetTranscript();\r\n//   };\r\n\r\n//   const generateReply = (text: string) => {\r\n//     return `I'm just a mock AI, but you said: \"${text}\"`;\r\n//   };\r\n\r\n//   const handleVoiceInput = () => {\r\n//     SpeechRecognition.startListening({ continuous: false, language: 'en-US' });\r\n//     setInput(transcript);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"p-6 max-w-xl mx-auto bg-white rounded shadow\">\r\n//       <h1 className=\"text-2xl font-bold mb-4\">AI Chat ü§ñ</h1>\r\n//       <div className=\"space-y-2 mb-4\">\r\n//         {messages.map((msg, idx) => (\r\n//           <div key={idx} className=\"bg-gray-100 p-2 rounded\">{msg}</div>\r\n//         ))}\r\n//       </div>\r\n//       <div className=\"flex gap-2\">\r\n//         <input\r\n//           type=\"text\"\r\n//           value={input || transcript}\r\n//           onChange={(e) => setInput(e.target.value)}\r\n//           className=\"flex-1 p-2 border rounded\"\r\n//           placeholder=\"Type or speak your message...\"\r\n//         />\r\n//         <button\r\n//           onClick={handleSend}\r\n//           className=\"px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700\"\r\n//         >\r\n//           Send\r\n//         </button>\r\n//         <button\r\n//           onClick={handleVoiceInput}\r\n//           className={`px-4 py-2 rounded text-white ${listening ? 'bg-red-600' : 'bg-green-600'} hover:opacity-80`}\r\n//         >\r\n//           üé§ {listening ? 'Listening...' : 'Speak'}\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AIChat;\r\n\r\n\r\n// 'use client';\r\n\r\n// import React, { useState } from 'react';\r\n// import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n\r\n// const AIChat: React.FC = () => {\r\n//   const [messages, setMessages] = useState<string[]>([]);\r\n//   const [input, setInput] = useState('');\r\n\r\n//   const {\r\n//     transcript,\r\n//     listening,\r\n//     resetTranscript,\r\n//     browserSupportsSpeechRecognition,\r\n//   } = useSpeechRecognition();\r\n\r\n//   if (!browserSupportsSpeechRecognition) {\r\n//     return <span>Speech recognition is not supported in this browser.</span>;\r\n//   }\r\n\r\n//   const speakText = (text: string) => {\r\n//     const utterance = new SpeechSynthesisUtterance(text);\r\n//     utterance.lang = 'en-US';\r\n//     utterance.pitch = 1;\r\n//     utterance.rate = 1;\r\n//     utterance.volume = 1;\r\n//     speechSynthesis.speak(utterance);\r\n//   };\r\n\r\n//   const handleSend = () => {\r\n//     if (!input.trim()) return;\r\n//     const userMessage = `You: ${input}`;\r\n//     const aiMessage = `AI: ${generateReply(input)}`;\r\n//     setMessages([...messages, userMessage, aiMessage]);\r\n//     speakText(aiMessage);\r\n//     setInput('');\r\n//     resetTranscript();\r\n//   };\r\n\r\n//   const generateReply = (text: string) => {\r\n//     return `I'm just a mock AI, but you said: \"${text}\"`;\r\n//   };\r\n\r\n//   const handleVoiceInput = () => {\r\n//     SpeechRecognition.startListening({ continuous: false, language: 'en-US' });\r\n//     setInput(transcript);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"p-6 max-w-xl mx-auto bg-white rounded shadow\">\r\n//       <h1 className=\"text-2xl font-bold mb-4\">AI Chat ü§ñ</h1>\r\n//       <div className=\"space-y-2 mb-4\">\r\n//         {messages.map((msg, idx) => (\r\n//           <div key={idx} className=\"bg-gray-100 p-2 rounded\">{msg}</div>\r\n//         ))}\r\n//       </div>\r\n//       <div className=\"flex gap-2\">\r\n//         <input\r\n//           type=\"text\"\r\n//           value={input || transcript}\r\n//           onChange={(e) => setInput(e.target.value)}\r\n//           className=\"flex-1 p-2 border rounded\"\r\n//           placeholder=\"Type or speak your message...\"\r\n//         />\r\n//         <button\r\n//           onClick={handleSend}\r\n//           className=\"px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700\"\r\n//         >\r\n//           Send\r\n//         </button>\r\n//         <button\r\n//           onClick={handleVoiceInput}\r\n//           className={`px-4 py-2 rounded text-white ${listening ? 'bg-red-600' : 'bg-green-600'} hover:opacity-80`}\r\n//         >\r\n//           üé§ {listening ? 'Listening...' : 'Speak'}\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AIChat;\r\n\r\n\r\n\r\n// 'use client';\r\n// import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n// import { useEffect } from 'react';\r\n\r\n// const AiChat = () => {\r\n//   const {\r\n//     transcript,\r\n//     listening,\r\n//     resetTranscript,\r\n//     browserSupportsSpeechRecognition,\r\n//   } = useSpeechRecognition();\r\n\r\n//   useEffect(() => {\r\n//     // Automatically start listening when component mounts\r\n//     SpeechRecognition.startListening({ continuous: true });\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     // Speak the transcript using a selected feminine voice\r\n//     if (transcript) {\r\n//       const synth = window.speechSynthesis;\r\n//       const utterance = new SpeechSynthesisUtterance(transcript);\r\n\r\n//       // Filter available voices to find a feminine one\r\n//       const voices = synth.getVoices();\r\n//       const selectedVoice = voices.find(\r\n//         (voice) => voice.name.includes('Female') || voice.name.includes('Samantha') || voice.name.includes('Google US English')\r\n//       );\r\n\r\n//       // Set the selected voice (fallback to default if not found)\r\n//       utterance.voice = selectedVoice || voices[0];\r\n\r\n//       // Optional: Set pitch and rate for more natural tone\r\n//       utterance.pitch = 1;\r\n//       utterance.rate = 1;\r\n\r\n//       synth.speak(utterance);\r\n//     }\r\n//   }, [transcript]);\r\n\r\n//   if (!browserSupportsSpeechRecognition) {\r\n//     return <span>Your browser does not support speech recognition.</span>;\r\n//   }\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>üéôÔ∏è AI Chat</h2>\r\n//       <p>Listening: {listening ? 'Yes' : 'No'}</p>\r\n//       <p>Transcript: {transcript}</p>\r\n//       <button onClick={resetTranscript}>Reset</button>\r\n\r\n//       {/* üîá Resume and Pause removed as requested */}\r\n\r\n//       {/* üéß Voice Options (commented out for future use) */}\r\n//       {/* const selectedVoice = voices.find((voice) => voice.name.includes('Google UK English Female')); */}\r\n//       {/* const selectedVoice = voices.find((voice) => voice.name.includes('Microsoft Zira Desktop')); */}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AiChat;\r\n\r\n// 'use client'\r\n// import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n// import { useEffect } from 'react';\r\n\r\n// const AiChat = () => {\r\n//   const {\r\n//     transcript,\r\n//     listening,\r\n//     resetTranscript,\r\n//     browserSupportsSpeechRecognition,\r\n//   } = useSpeechRecognition();\r\n\r\n//   useEffect(() => {\r\n//     // Start listening automatically\r\n//     SpeechRecognition.startListening({ continuous: true });\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     // Speak the transcript using a selected feminine voice\r\n//     if (transcript) {\r\n//       const synth = window.speechSynthesis;\r\n//       const utterance = new SpeechSynthesisUtterance(transcript);\r\n\r\n//       const voices = synth.getVoices();\r\n//       const selectedVoice = voices.find(\r\n//         (voice) =>\r\n//           voice.name.includes('Female') ||\r\n//           voice.name.includes('Samantha') ||\r\n//           voice.name.includes('Google US English')\r\n//       );\r\n\r\n//       utterance.voice = selectedVoice || voices[0];\r\n//       utterance.pitch = 1;\r\n//       utterance.rate = 1;\r\n\r\n//       synth.speak(utterance);\r\n//     }\r\n//   }, [transcript]);\r\n\r\n//   if (!browserSupportsSpeechRecognition) {\r\n//     return (\r\n//       <div className=\"text-center text-red-500 mt-10\">\r\n//         ‚ùå Your browser does not support speech recognition.\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"max-w-xl mx-auto mt-10 p-6 bg-white shadow-lg rounded-lg border border-gray-200\">\r\n//       <h2 className=\"text-2xl font-bold text-gray-800 mb-4 flex items-center gap-2\">\r\n//         üéôÔ∏è AI Voice Chat\r\n//       </h2>\r\n\r\n//       <div className=\"mb-4\">\r\n//         <span className=\"font-medium text-gray-700\">Listening:</span>{' '}\r\n//         <span className={listening ? 'text-green-600' : 'text-red-600'}>\r\n//           {listening ? 'Yes' : 'No'}\r\n//         </span>\r\n//       </div>\r\n\r\n//       <div className=\"mb-4\">\r\n//         <label className=\"block text-gray-700 font-medium mb-1\">Transcript:</label>\r\n//         <div className=\"bg-gray-100 p-3 rounded h-40 overflow-y-auto text-sm text-gray-800 border border-gray-300\">\r\n//           {transcript || 'Start speaking...'}\r\n//         </div>\r\n//       </div>\r\n\r\n//       <button\r\n//         onClick={resetTranscript}\r\n//         className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded transition duration-200\"\r\n//       >\r\n//         üîÑ Reset\r\n//       </button>\r\n\r\n//       {/* üéß Voice Options (commented out for future use) */}\r\n//       {/* const selectedVoice = voices.find((voice) => voice.name.includes('Google UK English Female')); */}\r\n//       {/* const selectedVoice = voices.find((voice) => voice.name.includes('Microsoft Zira Desktop')); */}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AiChat;\r\n\r\n\r\n\r\n// 'use client';\r\n\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import dynamic from 'next/dynamic';\r\n// import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n\r\n// const AIChat: React.FC = () => {\r\n//   // Chat messages\r\n//   const [messages, setMessages] = useState<string[]>([]);\r\n\r\n//   // User input\r\n//   const [input, setInput] = useState('');\r\n\r\n//   // Available voices + selected voice\r\n//   const [voices, setVoices] = useState<SpeechSynthesisVoice[]>([]);\r\n//   const [selectedVoice, setSelectedVoice] = useState<SpeechSynthesisVoice | null>(null);\r\n\r\n//   // Ref for utterance\r\n//   const utteranceRef = useRef<SpeechSynthesisUtterance | null>(null);\r\n\r\n//   // Speech recognition hook\r\n//   const {\r\n//     transcript,\r\n//     listening,\r\n//     resetTranscript,\r\n//     browserSupportsSpeechRecognition,\r\n//   } = useSpeechRecognition();\r\n\r\n//   // Load voices safely in browser\r\n//   useEffect(() => {\r\n//     if (typeof window === 'undefined') return;\r\n\r\n//     const loadVoices = () => {\r\n//       const availableVoices = window.speechSynthesis.getVoices();\r\n//       setVoices(availableVoices);\r\n\r\n//       // Default to en-US if available\r\n//       setSelectedVoice(\r\n//         availableVoices.find((v) => v.lang === 'en-US') || availableVoices[0] || null\r\n//       );\r\n//     };\r\n\r\n//     // Voice list may load asynchronously\r\n//     if (typeof window !== 'undefined' && window.speechSynthesis.onvoiceschanged !== undefined) {\r\n//       window.speechSynthesis.onvoiceschanged = loadVoices;\r\n//     }\r\n\r\n//     loadVoices();\r\n//   }, []);\r\n\r\n//   // Fallback UI if speech recognition not supported\r\n//   if (!browserSupportsSpeechRecognition) {\r\n//     return <span>Speech recognition is not supported in this browser.</span>;\r\n//   }\r\n\r\n//   // Speak text\r\n//   const speakText = (text: string) => {\r\n//     if (typeof window === 'undefined') return;\r\n\r\n//     // Cancel ongoing speech\r\n//     if (window.speechSynthesis.speaking) {\r\n//       window.speechSynthesis.cancel();\r\n//     }\r\n\r\n//     const utterance = new SpeechSynthesisUtterance(text);\r\n//     utterance.voice = selectedVoice || null;\r\n//     utterance.lang = selectedVoice?.lang || 'en-US';\r\n//     utterance.pitch = 1;\r\n//     utterance.rate = 1;\r\n//     utterance.volume = 1;\r\n\r\n//     utteranceRef.current = utterance;\r\n//     window.speechSynthesis.speak(utterance);\r\n//   };\r\n\r\n//   // Send message\r\n//   const handleSend = () => {\r\n//     if (!input.trim()) return;\r\n\r\n//     const userMessage = `You: ${input}`;\r\n//     const aiMessage = `AI: ${generateReply(input)}`;\r\n\r\n//     setMessages((prev) => [...prev, userMessage, aiMessage]);\r\n//     speakText(aiMessage);\r\n//     setInput('');\r\n//     resetTranscript();\r\n//   };\r\n\r\n//   // Mock AI reply\r\n//   const generateReply = (text: string) => {\r\n//     return `I'm just a mock AI, but you said: \"${text}\"`;\r\n//   };\r\n\r\n//   // Voice input\r\n//   const handleVoiceInput = () => {\r\n//     SpeechRecognition.startListening({ continuous: false, language: 'en-US' });\r\n//     setInput(transcript);\r\n//   };\r\n\r\n//   // Playback controls\r\n//   const handlePause = () => {\r\n//     if (typeof window !== 'undefined' && window.speechSynthesis.speaking && !window.speechSynthesis.paused) {\r\n//       window.speechSynthesis.pause();\r\n//     }\r\n//   };\r\n\r\n//   const handleResume = () => {\r\n//     if (typeof window !== 'undefined' && window.speechSynthesis.paused) {\r\n//       window.speechSynthesis.resume();\r\n//     }\r\n//   };\r\n\r\n//   const handleStop = () => {\r\n//     if (typeof window !== 'undefined') {\r\n//       window.speechSynthesis.cancel();\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"p-6 max-w-xl mx-auto bg-white rounded shadow\">\r\n//       <h1 className=\"text-2xl font-bold mb-4\">AI Chat ü§ñ</h1>\r\n\r\n//       {/* Voice selector */}\r\n//       <div className=\"mb-4\">\r\n//         <label className=\"block mb-2 font-semibold\">Select Voice:</label>\r\n//         <select\r\n//           value={selectedVoice?.name || ''}\r\n//           onChange={(e) =>\r\n//             setSelectedVoice(voices.find((v) => v.name === e.target.value) || null)\r\n//           }\r\n//           className=\"w-full p-2 border rounded\"\r\n//         >\r\n//           {voices.map((voice, idx) => (\r\n//             <option key={idx} value={voice.name}>\r\n//               {voice.name} ({voice.lang})\r\n//             </option>\r\n//           ))}\r\n//         </select>\r\n//       </div>\r\n\r\n//       {/* Messages */}\r\n//       <div className=\"space-y-2 mb-4 max-h-60 overflow-y-auto border p-2 rounded bg-gray-50\">\r\n//         {messages.map((msg, idx) => (\r\n//           <div key={idx} className=\"bg-gray-100 p-2 rounded\">\r\n//             {msg}\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n\r\n//       {/* Input + buttons */}\r\n//       <div className=\"flex gap-2 mb-2\">\r\n//         <input\r\n//           type=\"text\"\r\n//           value={input || transcript}\r\n//           onChange={(e) => setInput(e.target.value)}\r\n//           className=\"flex-1 p-2 border rounded\"\r\n//           placeholder=\"Type or speak your message...\"\r\n//         />\r\n//         <button\r\n//           onClick={handleSend}\r\n//           className=\"px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700\"\r\n//         >\r\n//           Send\r\n//         </button>\r\n//         <button\r\n//           onClick={handleVoiceInput}\r\n//           className={`px-4 py-2 rounded text-white ${\r\n//             listening ? 'bg-red-600' : 'bg-green-600'\r\n//           } hover:opacity-80`}\r\n//         >\r\n//           üé§ {listening ? 'Listening...' : 'Speak'}\r\n//         </button>\r\n//       </div>\r\n\r\n//       {/* Playback controls */}\r\n//       <div className=\"flex gap-2\">\r\n//         <button\r\n//           onClick={handlePause}\r\n//           className=\"px-3 py-1 bg-yellow-500 text-white rounded hover:bg-yellow-600\"\r\n//         >\r\n//           Pause\r\n//         </button>\r\n//         <button\r\n//           onClick={handleResume}\r\n//           className=\"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600\"\r\n//         >\r\n//           Resume\r\n//         </button>\r\n//         <button\r\n//           onClick={handleStop}\r\n//           className=\"px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600\"\r\n//         >\r\n//           Stop\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default dynamic(() => Promise.resolve(AIChat), { ssr: false });\r\n\r\n\r\n\r\n\r\n// 'use client';\r\n\r\n// import React, { useEffect, useRef, useState } from 'react';\r\n// import dynamic from 'next/dynamic';\r\n\r\n// const AIChat: React.FC = () => {\r\n//   // Chat messages\r\n//   const [messages, setMessages] = useState<string[]>([]);\r\n//   const [input, setInput] = useState('');\r\n\r\n//   // Voices\r\n//   const [voices, setVoices] = useState<SpeechSynthesisVoice[]>([]);\r\n//   const [selectedVoice, setSelectedVoice] = useState<SpeechSynthesisVoice | null>(null);\r\n\r\n//   // Recognition instance\r\n//   const recognitionRef = useRef<SpeechRecognition | null>(null);\r\n\r\n//   // Speech synthesis utterance\r\n//   const utteranceRef = useRef<SpeechSynthesisUtterance | null>(null);\r\n\r\n//   // Listening state\r\n//   const [listening, setListening] = useState(false);\r\n\r\n//   // Load voices\r\n//   useEffect(() => {\r\n//     if (typeof window === 'undefined') return;\r\n\r\n//     const loadVoices = () => {\r\n//       const availableVoices = window.speechSynthesis.getVoices();\r\n//       setVoices(availableVoices);\r\n//       setSelectedVoice(\r\n//         availableVoices.find((v) => v.lang === 'en-US') || availableVoices[0] || null\r\n//       );\r\n//     };\r\n\r\n//     if (window.speechSynthesis.onvoiceschanged !== undefined) {\r\n//       window.speechSynthesis.onvoiceschanged = loadVoices;\r\n//     }\r\n//     loadVoices();\r\n//   }, []);\r\n\r\n//   // Initialize recognition\r\n//   useEffect(() => {\r\n//     if (typeof window === 'undefined') return;\r\n\r\n//     const SpeechRecognition =\r\n//       (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\r\n\r\n//     if (!SpeechRecognition) {\r\n//       console.warn('SpeechRecognition not supported in this browser.');\r\n//       return;\r\n//     }\r\n\r\n//     const recognition = new SpeechRecognition();\r\n//     recognition.lang = 'en-US';\r\n//     recognition.continuous = false;\r\n//     recognition.interimResults = false;\r\n\r\n//     recognition.onresult = (event: SpeechRecognitionEvent) => {\r\n//       const transcript = event.results[0][0].transcript;\r\n//       setInput(transcript);\r\n//     };\r\n\r\n//     recognition.onend = () => setListening(false);\r\n\r\n//     recognitionRef.current = recognition;\r\n//   }, []);\r\n\r\n//   // Speak text\r\n//   const speakText = (text: string) => {\r\n//     if (typeof window === 'undefined') return;\r\n\r\n//     if (window.speechSynthesis.speaking) {\r\n//       window.speechSynthesis.cancel();\r\n//     }\r\n\r\n//     const utterance = new SpeechSynthesisUtterance(text);\r\n//     utterance.voice = selectedVoice || null;\r\n//     utterance.lang = selectedVoice?.lang || 'en-US';\r\n//     utterance.pitch = 1;\r\n//     utterance.rate = 1;\r\n//     utterance.volume = 1;\r\n\r\n//     utteranceRef.current = utterance;\r\n//     window.speechSynthesis.speak(utterance);\r\n//   };\r\n\r\n//   // Handle send\r\n//   const handleSend = () => {\r\n//     if (!input.trim()) return;\r\n\r\n//     const userMessage = `You: ${input}`;\r\n//     const aiMessage = `AI: ${generateReply(input)}`;\r\n\r\n//     setMessages((prev) => [...prev, userMessage, aiMessage]);\r\n//     speakText(aiMessage);\r\n//     setInput('');\r\n//   };\r\n\r\n//   // Mock AI reply\r\n//   const generateReply = (text: string) => {\r\n//     return `I'm just a mock AI, but you said: \"${text}\"`;\r\n//   };\r\n\r\n//   // Start voice input\r\n//   const handleVoiceInput = () => {\r\n//     if (recognitionRef.current) {\r\n//       setListening(true);\r\n//       recognitionRef.current.start();\r\n//     }\r\n//   };\r\n\r\n//   // Playback controls\r\n//   const handlePause = () => {\r\n//     if (typeof window !== 'undefined' && window.speechSynthesis.speaking && !window.speechSynthesis.paused) {\r\n//       window.speechSynthesis.pause();\r\n//     }\r\n//   };\r\n\r\n//   const handleResume = () => {\r\n//     if (typeof window !== 'undefined' && window.speechSynthesis.paused) {\r\n//       window.speechSynthesis.resume();\r\n//     }\r\n//   };\r\n\r\n//   const handleStop = () => {\r\n//     if (typeof window !== 'undefined') {\r\n//       window.speechSynthesis.cancel();\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"p-6 max-w-xl mx-auto bg-white rounded shadow\">\r\n//       <h1 className=\"text-2xl font-bold mb-4\">AI Chat ü§ñ</h1>\r\n\r\n//       {/* Voice selector */}\r\n//       <div className=\"mb-4\">\r\n//         <label className=\"block mb-2 font-semibold\">Select Voice:</label>\r\n//         <select\r\n//           value={selectedVoice?.name || ''}\r\n//           onChange={(e) =>\r\n//             setSelectedVoice(voices.find((v) => v.name === e.target.value) || null)\r\n//           }\r\n//           className=\"w-full p-2 border rounded\"\r\n//         >\r\n//           {voices.map((voice, idx) => (\r\n//             <option key={idx} value={voice.name}>\r\n//               {voice.name} ({voice.lang})\r\n//             </option>\r\n//           ))}\r\n//         </select>\r\n//       </div>\r\n\r\n//       {/* Messages */}\r\n//       <div className=\"space-y-2 mb-4 max-h-60 overflow-y-auto border p-2 rounded bg-gray-50\">\r\n//         {messages.map((msg, idx) => (\r\n//           <div key={idx} className=\"bg-gray-100 p-2 rounded\">\r\n//             {msg}\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n\r\n//       {/* Input + buttons */}\r\n//       <div className=\"flex gap-2 mb-2\">\r\n//         <input\r\n//           type=\"text\"\r\n//           value={input}\r\n//           onChange={(e) => setInput(e.target.value)}\r\n//           className=\"flex-1 p-2 border rounded\"\r\n//           placeholder=\"Type or speak your message...\"\r\n//         />\r\n//         <button\r\n//           onClick={handleSend}\r\n//           className=\"px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700\"\r\n//         >\r\n//           Send\r\n//         </button>\r\n//         <button\r\n//           onClick={handleVoiceInput}\r\n//           className={`px-4 py-2 rounded text-white ${\r\n//             listening ? 'bg-red-600' : 'bg-green-600'\r\n//           } hover:opacity-80`}\r\n//         >\r\n//           üé§ {listening ? 'Listening...' : 'Speak'}\r\n//         </button>\r\n//       </div>\r\n\r\n//       {/* Playback controls */}\r\n//       <div className=\"flex gap-2\">\r\n//         <button\r\n//           onClick={handlePause}\r\n//           className=\"px-3 py-1 bg-yellow-500 text-white rounded hover:bg-yellow-600\"\r\n//         >\r\n//           Pause\r\n//         </button>\r\n//         <button\r\n//           onClick={handleResume}\r\n//           className=\"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600\"\r\n//         >\r\n//           Resume\r\n//         </button>\r\n//         <button\r\n//           onClick={handleStop}\r\n//           className=\"px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600\"\r\n//         >\r\n//           Stop\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// // Disable SSR for this component\r\n// export default dynamic(() => Promise.resolve(AIChat), { ssr: false });\r\n\r\n\r\n\r\n\r\n\r\n\r\n'use client';\r\nimport { useState, useRef } from \"react\";\r\n\r\nexport default function AIChat() {\r\n  const [listening, setListening] = useState(false);\r\n  const [messages, setMessages] = useState<{ role: string; text: string }[]>([]);\r\n  const recognitionRef = useRef<any>(null);\r\n\r\n  // üé§ Start voice recognition\r\n  const startListening = () => {\r\n    if (!('webkitSpeechRecognition' in window)) {\r\n      alert(\"Speech Recognition not supported in this browser.\");\r\n      return;\r\n    }\r\n\r\n    const SpeechRecognition = (window as any).webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.lang = \"en-US\";\r\n    recognition.interimResults = false;\r\n\r\n    recognition.onstart = () => setListening(true);\r\n    recognition.onend = () => setListening(false);\r\n\r\n    recognition.onresult = async (event: any) => {\r\n      const transcript = event.results[0][0].transcript;\r\n      addMessage(\"user\", transcript);\r\n      await sendToAI(transcript);\r\n    };\r\n\r\n    recognition.start();  \r\n    recognitionRef.current = recognition;\r\n  };\r\n\r\n  // ü§ñ Send message to AI\r\n  const sendToAI = async (text: string) => {\r\n    const res = await fetch(\"/api/chat\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ message: text }),\r\n    });\r\n\r\n    const data = await res.json();\r\n    addMessage(\"ai\", data.reply);\r\n    speak(data.reply);\r\n  };\r\n\r\n  // üó£Ô∏è Speak AI response\r\n  const speak = (text: string) => {\r\n    const synth = window.speechSynthesis;\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    utterance.lang = \"en-US\";\r\n    synth.speak(utterance);\r\n  };\r\n\r\n  // üí¨ Add message\r\n  const addMessage = (role: string, text: string) => {\r\n    setMessages((prev) => [...prev, { role, text }]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4 max-w-lg mx-auto space-y-4\">\r\n      <div className=\"border p-2 rounded h-64 overflow-y-auto bg-gray-100\">\r\n        {messages.map((m, i) => (\r\n          <div key={i} className={m.role === \"user\" ? \"text-blue-600\" : \"text-green-600\"}>\r\n            <b>{m.role}:</b> {m.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <button\r\n        onClick={startListening}\r\n        className={`px-4 py-2 rounded ${listening ? \"bg-red-500\" : \"bg-blue-500\"} text-white`}\r\n      >\r\n        {listening ? \"Listening...\" : \"üé§ Speak\"}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 724, "column": 0}, "map": {"version":3,"sources":["file:///D:/Github/ChatApp/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react.ts"],"sourcesContent":["module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['react-ssr']!.React\n"],"names":["module","exports","require","vendored","React"],"mappings":"AAAAA,OAAOC,OAAO,GACZC,QAAQ,4HACRC,QAAQ,CAAC,YAAY,CAAEC,KAAK","ignoreList":[0],"debugId":null}}]
}